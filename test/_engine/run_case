#!/bin/sh

# These must be set before initializing anything else (incl. calling defs.sh):
#!! Which is pretty stupid, as that one could do this same thing, and then
#!! the caller could just run this more easily...
export TEST_DIR=${TEST_DIR:-`pwd`}
#echo Test dir is: \"$TEST_DIR\"
_TEST_ENGINE_DIR=`dirname $0`
export _TEST_ENGINE_DIR=`realpath ${_TEST_ENGINE_DIR}`

. "$_TEST_ENGINE_DIR/defs.sh"
retval=$?; if [[ "$retval" != "0" ]]; then exit $retval; fi

case_path=`get_case_path $1` || FATAL "Test case \"$1\" not found!"

#!----------------------------------------------------------------------------
#! Now we have a path to the test case (or ""!).
#! It can be either a single file or a test case dir, though!
#! This script must handle the differences.
#!----------------------------------------------------------------------------

CASE=`get_case_name ${case_path}` || FATAL "get_case_name can't really fail, so dunno what to say..." 99
export CASE
	#! WOW!... Jesus FC!... :-/ Had to separate the `export` from setting it,
	#! otherwise $? coming from the func. would be reset to 0! :-ooo
	#! -> "SC2155" (https://github.com/koalaman/shellcheck/wiki/SC2155)

echo "---------------------------------------------------------------"
DEBUG Identified \"$1\" as test case [$CASE] at \"$case_path\"
echo CASE \"${CASE}\"

if [[ ! -d  "${case_path}" ]]; then
	case_script="${case_path}"
	TEST_CASE_DIR=`dirname "${case_path}"`
else
	case_script="${case_path}/${TEST_CASE_SCRIPT_NAME}"
	TEST_CASE_DIR=${case_path}
fi

if [[ ! -e "${case_script}" ]]; then
	FATAL "Test script not found: \"${case_script}\"!"
fi

#
# Run a test case via a .case definition...
#

# Prep. the tmp work file locations...
#! Note: preparing the exp. results file requires running the case script
#!       first for its EXPECT clauses, if it has no standalone EXPECT file!
outfile="${TMP_DIR}/${CASE}.out"
errfile="${TMP_DIR}/${CASE}.err"
retfile="${TMP_DIR}/${CASE}.retval"

# Reset the work files...
test -f "${outfile}" && rm "${outfile}"
test -f "${errfile}" && rm "${errfile}"
test -f "${retfile}" && rm "${retfile}"

MAKE=`get_make_flavor`

# Run a build for the test case if it seems to need one... (and $MAKE is set)
build_dir "$TEST_CASE_DIR" || FATAL "Failed to build the test case!" $?

#-----------------------------------
# Finally, run (source) the case...
#-----------------------------------
failed=0
EXPECT=
case_variant_counter=0
. "${case_script}"

retval=$?; if [[ "$retval" != "0" ]]; then
	ERROR "Test script failed with unexpected error $retval!"
	exit 99
fi

# Find or dyn. regenerate the expfile if defined in a .case script
if [[ -e         "${TEST_CASE_DIR}/${EXPECT_FILE_NAME}" ]]; then
	 expfile="${TEST_CASE_DIR}/${EXPECT_FILE_NAME}"

# NOTE:
# In a mixed "GNU tools on Windows" env. (like mine) diff may not be able
# to ignore CR/LF differences, so we need to strip those manually.
# (-> e.g.: https://github.com/skeeto/w64devkit/issues/45)
# One easy way is to normalize the newlines in *both* the output
# and the user-supplied "expect" file -- which means we'd need to
# "redirect" that too, the same way we do with an EXPECT clause.
# (Because obviously we won't touch the opriginal file.)
	kludge_expf="${TMP_DIR}/${CASE}.expected"
	# Better do this together with outfile, later below:
	# tr -d '\015' < ${expfile} > "${kludge_expf}"
	cp "${expfile}" "${kludge_expf}"
	expfile=${kludge_expf}
else
	expfile="${TMP_DIR}/${CASE}.expected"
	# $EXPECT must be quoted to preserve newlines.
	# And mind the -n, too:
	echo -n "${EXPECT}" > "${expfile}"
fi

# Normalizing these would prevent precision-testing some whitespace handling, but the
# CR/LF mismatches is a bigger issue anyway than what we could handle on this level...
normalize_crlf "${expfile}"
normalize_crlf "${outfile}"

#echo diff -b "${outfile}" "${expfile}"
     diff -b "${expfile}" "${outfile}"

if [[ $? == 0 ]]; then
	echo "  OK."
else
	echo "  !!!!!!!!!!!!!!!!!!!!!!!!! FAILED !!!!!!!!!!!!!!!!!!!!!!!!!"
	failed=1
fi

exit ${failed}
